#!/usr/bin/env python3
"""
WATCHAI - Synchronisation des logs depuis Streamlit Cloud
R√©cup√®re les logs de connexion depuis l'application web
"""

import requests
import json
from pathlib import Path
from datetime import datetime
import streamlit as st
from watchai_logger import watchai_logger
import time

# Configuration
STREAMLIT_APP_URL = "https://watchai.streamlit.app"  # Remplacer par l'URL r√©elle de votre app
LOCAL_LOG_FILE = Path("connection_logs_cloud.json")
SYNC_INTERVAL = 60  # Synchronisation toutes les 60 secondes

def fetch_cloud_logs():
    """
    R√©cup√®re les logs depuis l'application Streamlit Cloud
    Note: Cette fonction n√©cessite que l'app expose un endpoint API pour les logs
    """
    try:
        # Pour l'instant, on va lire le fichier local si disponible
        # Dans une vraie impl√©mentation, il faudrait un endpoint API
        cloud_log_file = Path("connection_logs.json")

        if cloud_log_file.exists():
            with open(cloud_log_file, 'r') as f:
                return json.load(f)
        return []
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des logs cloud: {e}")
        return []

def sync_logs():
    """
    Synchronise les logs cloud avec le syst√®me local
    """
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Synchronisation des logs...")

    # R√©cup√©rer les logs cloud
    cloud_logs = fetch_cloud_logs()

    if not cloud_logs:
        print("Aucun log cloud trouv√©")
        return

    # Charger les logs locaux existants
    local_logs = []
    if LOCAL_LOG_FILE.exists():
        with open(LOCAL_LOG_FILE, 'r') as f:
            local_logs = json.load(f)

    # Identifier les nouveaux logs
    existing_timestamps = {log['timestamp'] for log in local_logs}
    new_logs = [log for log in cloud_logs if log['timestamp'] not in existing_timestamps]

    if new_logs:
        print(f"Trouv√© {len(new_logs)} nouvelle(s) connexion(s)")

        # Traiter les nouvelles connexions de Jean
        for log in new_logs:
            if log.get('username') == 'Jean' and log.get('success'):
                print(f"üîî JEAN S'EST CONNECT√â: {log['timestamp']}")

                # Enregistrer dans le syst√®me de logs WATCHAI
                watchai_logger.log_activity(
                    "jean_connection",
                    f"Jean connect√© depuis l'app web √† {log['timestamp']}"
                )

        # Fusionner les logs
        local_logs.extend(new_logs)

        # Sauvegarder les logs mis √† jour
        with open(LOCAL_LOG_FILE, 'w') as f:
            json.dump(local_logs, f, indent=2)

        print(f"Logs synchronis√©s: {len(new_logs)} nouvelle(s) entr√©e(s)")
    else:
        print("Aucune nouvelle connexion")

    return cloud_logs

def get_jean_connections():
    """
    Retourne toutes les connexions de Jean
    """
    if LOCAL_LOG_FILE.exists():
        with open(LOCAL_LOG_FILE, 'r') as f:
            logs = json.load(f)

        jean_logs = [
            log for log in logs
            if log.get('username') == 'Jean' and log.get('success')
        ]

        return jean_logs
    return []

def display_jean_activity():
    """
    Affiche l'activit√© de Jean dans Streamlit
    """
    st.title("üìä Activit√© de Jean sur WATCHAI Web")

    jean_logs = get_jean_connections()

    if jean_logs:
        st.success(f"Jean s'est connect√© {len(jean_logs)} fois")

        # Afficher les derni√®res connexions
        st.subheader("Derni√®res connexions de Jean")
        for log in jean_logs[-5:][::-1]:  # 5 derni√®res, ordre inverse
            timestamp = datetime.fromisoformat(log['timestamp'])
            st.info(f"üîë Connexion le {timestamp.strftime('%d/%m/%Y √† %H:%M:%S')}")

        # Graphique d'activit√©
        if len(jean_logs) > 1:
            df = pd.DataFrame(jean_logs)
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df['date'] = df['timestamp'].dt.date

            daily_counts = df.groupby('date').size().reset_index(name='connexions')

            fig = px.bar(
                daily_counts,
                x='date',
                y='connexions',
                title="Connexions de Jean par jour",
                labels={'date': 'Date', 'connexions': 'Nombre de connexions'}
            )
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("Jean ne s'est pas encore connect√© sur l'application web")

def main():
    """
    Mode ligne de commande pour synchronisation continue
    """
    print("=== WATCHAI - Synchronisation des logs Cloud ===")
    print(f"Synchronisation toutes les {SYNC_INTERVAL} secondes")
    print("Appuyez sur Ctrl+C pour arr√™ter\n")

    try:
        while True:
            sync_logs()
            time.sleep(SYNC_INTERVAL)
    except KeyboardInterrupt:
        print("\n\nSynchronisation arr√™t√©e.")

if __name__ == "__main__":
    # Si lanc√© directement, mode synchronisation continue
    if st._is_running_with_streamlit:
        # Mode Streamlit
        display_jean_activity()
    else:
        # Mode ligne de commande
        main()